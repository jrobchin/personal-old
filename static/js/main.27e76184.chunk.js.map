{"version":3,"sources":["components/map.component.js","App.js","serviceWorker.js","index.js"],"names":["ZOOM_SPEED","PINS","name","long","lat","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","window","addEventListener","initMapState","componentDidUpdate","drawMap","componentWillUnmount","removeEventListener","_this$container$curre","container","current","offsetWidth","state","width","height","offsetHeight","scale","mapX","mapY","setState","asyncToGenerator","regenerator_default","a","mark","_callee","_this$state","svg","mapG","pinG","projection","geoPath","pins","wrap","_context","prev","next","geoJson","d3","sent","attr","selectAll","remove","append","center","translate","map","pin","coords","objectSpread","x","y","data","features","enter","d","i","stop","zoom","amount","_ref2","_ref2$dx","dx","_ref2$dy","dy","moveTo","_ref3","onMouseDown","e","mouse","dragging","nativeEvent","offsetX","offsetY","onMouseMove","_this$mouse","onWheel","zoomFactor","deltaY","React","createRef","_this2","react_default","createElement","id","ref","onMouseUp","onMouseLeave","onDoubleClick","Component","App","map_component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27e76184.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nimport '../styles/map.css';\n\nconst ZOOM_SPEED = 0.1;\n\nconst PINS = [\n  {\n    name: 'Toronto, Canada',\n    long: -79.6010328,\n    lat: 43.6565353,\n  },\n  {\n    name: 'Berlin, Germany',\n    long: 13.4050,\n    lat: 52.5200\n  },\n  {\n    name: 'New York, USA',\n    long: -74.0060,\n    lat: 40.7128\n  },\n  {\n    name: 'London, Canada',\n    long: -81.2453,\n    lat: 42.9849\n  },\n  {\n    name: 'London, Canada',\n    long: -81.2453,\n    lat: 42.9849\n  }\n];\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      scale: 0,\n      mapX: 0,\n      mapY: 0,\n    };\n\n    this.container = React.createRef();\n\n    this.geoJson = null;\n    this.mouse = {\n      dragging: false,\n      x: 0,\n      y: 0,\n    };\n  }\n\n  componentDidMount = () => {\n    window.addEventListener('resize', this.initMapState);\n    this.initMapState();\n  }\n  \n  componentDidUpdate = () => {\n    this.drawMap();\n  }\n  \n  componentWillUnmount = () => {\n    window.removeEventListener('resize', this.initMapState);\n  }\n\n  initMapState = () => {\n    let { offsetWidth, offsetHeight } = this.container.current;\n\n    let state = {\n      width: offsetWidth,\n      height: offsetHeight,\n      scale: 186,\n      mapX: 380,\n      mapY: 220,\n    };\n\n    if (offsetWidth > 600) {\n      state.scale = 186;\n      state.mapX = 465;\n      state.mapY = 221;\n    } else if (offsetWidth > 992) {\n      state.scale = 186;\n      state.mapX = 544;\n      state.mapY = 229;\n    }\n\n    this.setState(state);\n  }\n  \n  drawMap = async () => {\n\n    // Load GeoJSON data\n    if (this.geoJson === null)\n      this.geoJson = await d3.json('/world.geo.json')\n\n    // Get params to draw the map\n    var { width, height, scale, mapX, mapY } = this.state;\n    \n    // Create map and svg groups\n    var svg = d3.select('#map')\n                .attr('width', width)\n                .attr('height', height);\n    svg.selectAll(\"*\").remove();\n    var mapG = svg.append('g');\n    var pinG = svg.append('g');\n    \n    // Create projection and geopath\n    var projection = d3.geoMercator()\n                       .scale(scale)\n                       .center([0, 42])\n                       .translate([mapX, mapY]);\n    var geoPath = d3.geoPath()\n                 .projection(projection);\n    \n    // Transform pins to coordinates\n    let pins = PINS.map(pin => {\n      let coords = projection([pin.long, pin.lat]);\n      return {\n        ...pins,\n        x: coords[0],\n        y: coords[1]\n      };\n    });\n\n    // Draw paths\n    mapG.selectAll('path')\n        .data(this.geoJson.features)\n        .enter()\n        .append('path')\n        .attr('fill', '#d6d6b1')\n\n        .attr('d', geoPath);\n\n    // Draw pins\n    pinG.selectAll('circle')\n        .data(pins)\n        .enter()\n        .append('circle')\n        .attr('r', 4)\n        .attr('fill', '#3d5a6c')\n        .attr('cx', (d, i) => {\n          return d.x;\n        })\n        .attr('cy', (d, i) => {\n          return d.y;\n        });\n  }\n\n  zoom = (amount) => {\n    this.setState({\n      scale: this.state.scale * amount\n    });\n  }\n\n  translate = ({dx=0, dy=0}) => {\n    this.setState({\n      mapX: this.state.mapX + dx,\n      mapY: this.state.mapY + dy\n    });\n  }\n\n  moveTo = ({x, y}) => {\n    this.setState({\n      mapX: x,\n      mapY: y\n    });\n  }\n\n  onMouseDown = (e) => {\n    this.mouse.dragging = true;\n    this.mouse.x = e.nativeEvent.offsetX;\n    this.mouse.y = e.nativeEvent.offsetY;\n  }\n\n  onMouseMove = (e) => {\n    if (!this.mouse.dragging) return;\n\n    let { x, y } = this.mouse;\n    this.mouse.x = e.nativeEvent.offsetX;\n    this.mouse.y = e.nativeEvent.offsetY;\n    \n    this.translate({\n      dx: this.mouse.x - x,\n      dy: this.mouse.y - y\n    });\n  }\n\n  onWheel = (e) => {\n    let zoomFactor = e.deltaY > 0 ? 1 - ZOOM_SPEED : 1 + ZOOM_SPEED;\n    let dx = (this.container.current.offsetWidth/2 - this.state.mapX) * (zoomFactor - 1);\n    let dy = (this.container.current.offsetHeight/2 - this.state.mapY) * (zoomFactor - 1);\n    this.translate({dx: -dx, dy: -dy});\n    this.zoom(zoomFactor);\n  }\n\n  render() { \n    return (\n      <div>\n        <div id=\"map-container\" ref={this.container}>\n          <svg \n            id=\"map\"\n            onMouseDown={this.onMouseDown}\n            onMouseMove={this.onMouseMove}\n            onMouseUp={() => { this.mouse.dragging = false }}\n            onMouseLeave={() => { this.mouse.dragging = false }}\n            onWheel={this.onWheel}\n            onDoubleClick={this.onDoubleClick}\n          >\n          </svg>\n        </div>\n        <div>\n          <p>mapX: {this.state.mapX}, mapY: {this.state.mapY}</p>\n          <p>scale: {this.state.scale}</p>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default Map;","import React, { Component } from 'react';\nimport Map from './components/map.component';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Jason Chin</h1>\n        <Map />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}