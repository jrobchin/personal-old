{"version":3,"sources":["components/map.component.js","App.js","serviceWorker.js","index.js"],"names":["ZOOM_SPEED","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","window","addEventListener","initMapState","componentDidUpdate","drawMap","componentWillUnmount","removeEventListener","_this$container$curre","container","current","offsetWidth","offsetHeight","setState","width","height","mapX","mapY","scale","asyncToGenerator","regenerator_default","a","mark","_callee","_this$state","svg","g","projection","geoPath","wrap","_context","prev","next","geoJson","d3","sent","state","attr","selectAll","remove","append","center","translate","data","features","enter","stop","zoom","amount","_ref2","_ref2$dx","dx","_ref2$dy","dy","moveTo","_ref3","x","y","onMouseDown","e","mouse","dragging","nativeEvent","offsetX","offsetY","onMouseMove","_this$mouse","onWheel","zoomFactor","deltaY","React","createRef","_this2","react_default","createElement","id","ref","onMouseUp","onMouseLeave","onDoubleClick","Component","App","map_component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.699bc426.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nimport '../styles/map.css';\n\nconst ZOOM_SPEED = 0.1;\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      scale: 100,\n      mapX: null,\n      mapY: null,\n    };\n\n    this.container = React.createRef();\n\n    this.geoJson = null;\n    this.mouse = {\n      dragging: false,\n      x: 0,\n      y: 0,\n    };\n  }\n\n  componentDidMount = () => {\n    window.addEventListener('resize', this.initMapState);\n    this.initMapState();\n  }\n  \n  componentDidUpdate = () => {\n    this.drawMap();\n  }\n  \n  componentWillUnmount = () => {\n    window.removeEventListener('resize', this.initMapState);\n  }\n\n  initMapState = () => {\n    let { offsetWidth, offsetHeight } = this.container.current;\n    this.setState({\n      width: offsetWidth,\n      height: offsetHeight,\n      mapX: offsetWidth / 2,\n      mapY: offsetHeight / 2,\n      scale: offsetHeight / 4.25,\n    });\n  }\n  \n  drawMap = async () => {\n\n    // Load GeoJSON data\n    if (this.geoJson === null)\n      this.geoJson = await d3.json('/world.geo.json')\n\n    // Get params to draw the map\n    var { width, height, scale, mapX, mapY } = this.state;\n    \n    var svg = d3.select('#map')\n                .attr('width', width)\n                .attr('height', height);\n    svg.selectAll(\"*\").remove();\n    var g = svg.append('g');\n                \n    var projection = d3.geoMercator()\n                       .scale(scale)\n                       .center([0, 42])\n                       .translate([mapX, mapY]);\n    var geoPath = d3.geoPath()\n                 .projection(projection);\n    \n    g.selectAll('path')\n     .data(this.geoJson.features)\n     .enter()\n     .append('path')\n     .attr('fill', '#ccc')\n     .attr('d', geoPath);\n\n  }\n\n  zoom = (amount) => {\n    this.setState({\n      scale: this.state.scale * amount\n    });\n  }\n\n  translate = ({dx=0, dy=0}) => {\n    this.setState({\n      mapX: this.state.mapX + dx,\n      mapY: this.state.mapY + dy\n    });\n  }\n\n  moveTo = ({x, y}) => {\n    this.setState({\n      mapX: x,\n      mapY: y\n    });\n  }\n\n  onMouseDown = (e) => {\n    this.mouse.dragging = true;\n    this.mouse.x = e.nativeEvent.offsetX;\n    this.mouse.y = e.nativeEvent.offsetY;\n  }\n\n  onMouseMove = (e) => {\n    if (!this.mouse.dragging) return;\n\n    let { x, y } = this.mouse;\n    this.mouse.x = e.nativeEvent.offsetX;\n    this.mouse.y = e.nativeEvent.offsetY;\n    \n    this.translate({\n      dx: this.mouse.x - x,\n      dy: this.mouse.y - y\n    });\n  }\n\n  onWheel = (e) => {\n    let zoomFactor = e.deltaY > 0 ? 1 - ZOOM_SPEED : 1 + ZOOM_SPEED;\n    let dx = (this.container.current.offsetWidth/2 - this.state.mapX) * (zoomFactor - 1);\n    let dy = (this.container.current.offsetHeight/2 - this.state.mapY) * (zoomFactor - 1);\n    this.translate({dx: -dx, dy: -dy});\n    this.zoom(zoomFactor);\n  }\n\n  render() { \n    return (\n      <div id=\"map-container\" ref={this.container}>\n        <svg \n          id=\"map\"\n          onMouseDown={this.onMouseDown}\n          onMouseMove={this.onMouseMove}\n          onMouseUp={() => { this.mouse.dragging = false }}\n          onMouseLeave={() => { this.mouse.dragging = false }}\n          onWheel={this.onWheel}\n          onDoubleClick={this.onDoubleClick}\n        >\n        </svg>\n      </div>\n    );\n  }\n}\n \nexport default Map;","import React, { Component } from 'react';\nimport Map from './components/map.component';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Jason Chin</h1>\n        <Map />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}